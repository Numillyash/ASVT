gavrasm Gerd's AVR assembler version 5.4 (C)2022 by DG4FAC
----------------------------------------------------------
Source file: PWM.asm
Hex file:    PWM.hex
Eeprom file: PWM.eep
Compiled:    13.04.2023, 04:12:40
Pass:        2
     1: ;
     2: ; AssemblerApplication1.asm
     3: ;
     4: ; Created: 06.02.2023 18:38:51
     5: ; Author : Georgul
     6: ;
     7: .device atmega328p
     8: .def pinD6_reg = R24
     9: .def pinD5_reg = R28
    10: .def tmp_reg = R20
    11: .def tmp_sreg = R19
    12: 
    13: start:
    14: 000000   2411  CLR    R1            ; R1 = 0
    15: 000001   BE1F  OUT    SREG, R1      ; reset SREG
    16: 000002   EF4F  SER    tmp_reg       ; tmp = 255
    17: 000003   BF4D  OUT    SPL, tmp_reg  ; setup stack: low  is 255
    18: 000004   E048  LDI    tmp_reg, 8    ; tmp = 8
    19: 000005   BF4E  OUT    SPH, tmp_reg  ; setup stack: high is 8
    20: 000006   E021  LDI    R18, 1        ; R18 = 1
    21: 000007   E0A0  LDI    R26, 0        ; R26 = 0
    22: 000008   E0B1  LDI    R27, 1        ; R27 = 1
    23: 000009   C001  RJMP   sreg_to_stack_sub
    24: sreg_to_stack:
    25: 00000A   921D  ST     X+, R1
    26: sreg_to_stack_sub:
    27: 00000B   30A9  CPI    R26, 9        ; if R26 >= 9 then C = 0
    28: 00000C   07B2  CPC    R27, R18      ; if R27 == R18+C then Z = 0
    29: 00000D   F7E1  BRNE   sreg_to_stack ; if Z = 0 goto sreg_to_stack
    30: 00000E   940E  CALL   setup         ; call setup
        00000F   007B
    31: start_delay:
    32: 000010   B73F  IN     tmp_sreg, SREG      ; tmp_sreg = SREG
    33: 000011   94F8  CLI                        ; stop interrupts
    34: 000012   9180  LDS    R24, 261            ; R24 = 261 from RAM
        000013   0105
    35: 000014   9190  LDS    R25, 262            ; R25 = 262 from RAM
        000015   0106
    36: 000016   91A0  LDS    R26, 263            ; R26 = 263 from RAM
        000017   0107
    37: 000018   91B0  LDS    R27, 264            ; R27 = 264 from RAM
        000019   0108
    38: 00001A   B526  IN     R18, TCNT0          ; R18 = TCNT0 =  Timer/Counter0 (8-bit)
    39: 00001B   9BA8  SBIS   TIFR0, 0            ; if (TIFR0(0) = TOV0 = 1) skip next
    40: 00001C   C005  RJMP   LABEL_9             ; goto LABEL_9
    41: 00001D   3F2F  CPI    R18, 255            ; compare R18 with 255 (if R18 == 255 then Z = 1 else Z = 0)
    42: 00001E   F019  BREQ   LABEL_9             ; if (Z = 1) goto LABEL_9
    43: 00001F   9601  ADIW   R24, 1              ; R24-25 += 1
    44: 000020   1FAA  ROL    R26                 ; R26 = R26 * 2 + C, C = highest bit R26
    45: 000021   1FBB  ROL    R27                 ; R27 = R27 * 2 + C, C = highest bit R27
    46: LABEL_9:
    47: 000022   BF3F  OUT    SREG, tmp_sreg      ; SREG = tmp_sreg
    48: 000023   2FBA  MOV    R27, R26            ; R27 = R26
    49: 000024   2FA9  MOV    R26, R25            ; R26 = R25
    50: 000025   2F98  MOV    R25, R24            ; R25 = R24
    51: 000026   2788  CLR    R24                 ; R24 = 0
    52: 000027   01BC  MOVW   R22, R24            ; R22-23 = R24-25
    53: 000028   01CD  MOVW   R24, R26            ; R24-25 = R26-27
    54: 000029   E043  LDI    tmp_reg, 3          ; tmp_reg = 2
    55: micro_cycle:
    56: 00002A   0F66  LSL    R22                 ; R22 <<= 1
    57: 00002B   1F77  ROL    R23                 ; R23 = R23 * 2 + C, C = highest bit R23               
    58: 00002C   1F88  ROL    R24                 ; R24 = R24 * 2 + C, C = highest bit R24
    59: 00002D   1F99  ROL    R25                 ; R25 = R25 * 2 + C, C = highest bit R25
    60: 00002E   954A  DEC    tmp_reg             ; tmp_reg--
    61: 00002F   F7D1  BRNE   micro_cycle         ; if tmp_reg > 0 then recycle
    62: 000030   9508  RET                        ; go back
    63: LABEL_3:
    64: 000031   921F  PUSH   R1                  ; Stack ← R1
    65: 000032   920F  PUSH   R0                  ; Stack ← R0
    66: 000033   B60F  IN     R0, SREG            ; R0 = SREG
    67: 000034   920F  PUSH   R0                  ; Stack ← R0
    68: 000035   2411  CLR    R1                  ; R1 = 0
    69: 000036   932F  PUSH   R18                 ; Stack ← R18
    70: 000037   933F  PUSH   R19                 ; Stack ← R19
    71: 000038   938F  PUSH   R24                 ; Stack ← R24
    72: 000039   939F  PUSH   R25                 ; Stack ← R25
    73: 00003A   93AF  PUSH   R26                 ; Stack ← R26
    74: 00003B   93BF  PUSH   R27                 ; Stack ← R27
    75: 00003C   9130  LDS    R19, 256            ; R19 = 256 from RAM
        00003D   0100
    76: 00003E   9180  LDS    R24, 257            ; R24 = 257 from RAM
        00003F   0101
    77: 000040   9190  LDS    R25, 258            ; R25 = 258 from RAM
        000041   0102
    78: 000042   91A0  LDS    R26, 259            ; R26 = 259 from RAM
        000043   0103
    79: 000044   91B0  LDS    R27, 260            ; R27 = 260 from RAM       
        000045   0104
    80: 000046   E023  LDI    R18, 3              ; R18 = 3
    81: 000047   0F22  LSL    R18                 ; R18 <<= 1 = 6
    82: 000048   372D  CPI    R18, 125            ; compare R18 with 125
    83: 000049   F558  BRCC   LABEL_11            ; if R18 >= 125 goto LABEL_11
    84: 00004A   9601  ADIW   R24, 1              ; R24-25 += 1
    85: 00004B   1FAA  ROL    R26                 ; R26 = R26 * 2 + C, C = highest bit R26
    86: 00004C   1FBB  ROL    R27                 ; R27 = R27 * 2 + C, C = highest bit R27
    87: LABEL_12:
    88: 00004D   9320  STS    256, R18            ; 256 ← R18
        00004E   0100
    89: 00004F   9380  STS    257, R24            ; 257 ← R24
        000050   0101
    90: 000051   9390  STS    258, R25            ; 258 ← R25
        000052   0102
    91: 000053   93A0  STS    259, R26            ; 259 ← R26
        000054   0103
    92: 000055   93B0  STS    260, R27            ; 260 ← R27
        000056   0104
    93: 000057   9180  LDS    R24, 261            ; R24 = 261 from RAM
        000058   0105
    94: 000059   9190  LDS    R25, 262            ; R25 = 262 from RAM
        00005A   0106
    95: 00005B   91A0  LDS    R26, 263            ; R26 = 263 from RAM
        00005C   0107
    96: 00005D   91B0  LDS    R27, 264            ; R27 = 264 from RAM
        00005E   0108
    97: 00005F   9601  ADIW   R24, 1              ; R24-25 += 1
    98: 000060   1FAA  ROL    R26                 ; R26 = R26 * 2 + C, C = highest bit R26
    99: 000061   1FBB  ROL    R27                 ; R27 = R27 * 2 + C, C = highest bit R27
   100: 000062   9380  STS    261, R24            ; 261 ← R24
        000063   0105
   101: 000064   9390  STS    262, R25            ; 262 ← R25
        000065   0106
   102: 000066   93A0  STS    263, R26            ; 263 ← R26
        000067   0107
   103: 000068   93B0  STS    264, R27            ; 264 ← R27
        000069   0108
   104: 00006A   91BF  POP    R27                 ; R27 ← Stack
   105: 00006B   91AF  POP    R26                 ; R26 ← Stack
   106: 00006C   919F  POP    R25                 ; R25 ← Stack
   107: 00006D   918F  POP    R24                 ; R24 ← Stack
   108: 00006E   913F  POP    R19                 ; R19 ← Stack
   109: 00006F   912F  POP    R18                 ; R18 ← Stack
   110: 000070   900F  POP    R0                  ; R0 ← Stack
   111: 000071   BE0F  OUT    SREG, R0            ; SREG = R0
   112: 000072   900F  POP    R0                  ; R0 ← Stack
   113: 000073   901F  POP    R1                  ; R1 ← Stack
   114: 000074   9518  RETI                       ; PC ← Stack ; I = 1
   115: LABEL_11:
   116: 000075   E826  LDI    R18, 134            ; R18 = 134
   117: 000076   0F22  LSL    R18                 ; R18 <<= 1 = 268 = 12
   118: 000077   9601  ADIW   R24, 1              ; R24-25 += 1
   119: 000078   1FAA  ROL    R26                 ; R26 = R26 * 2 + C, C = highest bit R26
   120: 000079   1FBB  ROL    R27                 ; R27 = R27 * 2 + C, C = highest bit R27
   121: 00007A   CFD2  RJMP   LABEL_12            ; goto LABEL_12
   122: setup:
   123: 00007B   94F8  CLI                        ; stop interrupts
   124: 00007C   9A56  SBI    DDRD, 6             ; open pin_D6 port to OUT
   125: 00007D   9A55  SBI    DDRD, 5             ; open pin_D5 port to OUT
   126: 00007E   EA43  LDI    tmp_reg, 163        ; setup timer
   127: 00007F   BD44  OUT    TCCR0A, tmp_reg
   128: 000080   E044  LDI    tmp_reg, 4          ; setup timer
   129: 000081   BD45  OUT    TCCR0B, tmp_reg
   130: 000082   9478  SEI                        ; start interrupts
   131: 000083   E0C1  LDI    pinD5_reg, 1        ; setup register with 1 
   132: loop:
   133: 000084   BDC8  OUT    OCR0B, pinD5_reg       ; setup d5 percent
   134: 000085   2F8C  MOV    pinD6_reg, pinD5_reg   ; copy d5 to d6
   135: 000086   9580  COM    pinD6_reg              ; d6 = 255 - d6
   136: 000087   BD87  OUT    OCR0A, pinD6_reg       ; setup d6 percent
   137: 000088   940E  CALL   start_delay            ; start delay
        000089   0010
   138: 00008A   014B  MOVW   R8, R22                ; copy R22-23 to R8-9 
   139: 00008B   015C  MOVW   R10, R24               ; copy R24-25 to R10-11
   140: 00008C   E28A  LDI    R24, 42                ; R24 = 42
   141: 00008D   2EC8  MOV    R12, R24               ; R12 = R24 = 42
   142: 00008E   2CD1  MOV    R13, R1                ; R13 = R1
   143: 00008F   2CE1  MOV    R14, R1                ; R14 = R1
   144: 000090   2CF1  MOV    R15, R1                ; R15 = R1
   145: LABEL_14:
   146: 000091   940E  CALL   start_delay            ; start delay
        000092   0010
   147: 000093   1968  SUB    R22, R8                ; R22 -= R8
   148: 000094   0979  SBC    R23, R9                ; R23 -= R9
   149: 000095   098A  SBC    R24, R10               ; R24 -= (R10 + C)
   150: 000096   099B  SBC    R25, R11               ; R25 -= (R11 + C)
   151: 000097   3E68  CPI    R22, 232               ; compare R22 with 232
   152: 000098   4073  SBCI   R23, 3                 ; R23 -= (3 + C)
   153: 000099   0581  CPC    R24, R1                ; compare R24 with (R1 + C)
   154: 00009A   0591  CPC    R25, R1                ; compare R25 with (R1 + C)
   155: 00009B   F3A8  BRCS   LABEL_14               ; if (C = 1) goto LABEL_14
   156: 00009C   E021  LDI    R18, 1                 ; R18 = 1
   157: 00009D   1AC2  SUB    R12, R18               ; R12 -= R18
   158: 00009E   08D1  SBC    R13, R1                ; R13 -= R1
   159: 00009F   08E1  SBC    R14, R1                ; R14 -= R1
   160: 0000A0   08F1  SBC    R15, R1                ; R15 -= R1
   161: 0000A1   EE88  LDI    R24, 232               ; R24 = 232
   162: 0000A2   0C88  LSL    R8                     ; R8 <<= 1
   163: 0000A3   E083  LDI    R24, 3                 ; R24 = 3
   164: 0000A4   1C99  ROL    R9                     ; R9 = R9 * 2 + C, C = highest bit R9
   165: 0000A5   1CAA  ROL    R10                    ; R10 = R10 * 2 + C, C = highest bit R10
   166: 0000A6   1CBB  ROL    R11                    ; R11 = R11 * 2 + C, C = highest bit R11
   167: 0000A7   14C1  CP     R12, R1                ; compare R12 with R1
   168: 0000A8   04D1  CPC    R13, R1                ; compare R13 with (R1 + C)
   169: 0000A9   04E1  CPC    R14, R1                ; compare R14 with (R1 + C)
   170: 0000AA   04F1  CPC    R15, R1                ; compare R15 with (R1 + C)
   171: 0000AB   F729  BRNE   LABEL_14               ; if (C = 1) goto LABEL_14
   172: 0000AC   5FCF  SUBI   pinD5_reg, 255         ; d5 ++
   173: 0000AD   CFD6  RJMP   loop                   ; back to loop
 -> Warning 001: 2 symbol(s) defined, but not used!

Program             :      174 words.
Constants           :        0 words.
Total program memory:      174 words.
Eeprom space        :        0 bytes.
Data segment        :        0 bytes.
Compilation completed, no errors.
Compilation ended 13.04.2023, 04:12:40
